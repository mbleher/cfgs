## Global Configuration

global
    chroot /var/lib/haproxy
    pidfile ~/haproxy.pid
    user haproxy                    # Changes the process' username to haproxy
    group haproxy                   # Changes the process' group name to haproxy
    daemon
    nbproc 3
    cpu-map 1 1
    cpu-map 2 2
    cpu-map 3 3
    # maxconn 15000          # Max number of concurrent connections HAProxy will allow (affects QoS)
    # maxconnrate 10000     # Process-wide connection rate limit (in number of connections per second)
    # maxcomprate X         # Maximum input compression rate (in number of kilobytes per second)
    # maxsessrate 1000        # Process-wide session rate limit (in number of sessions per second)


## Default Configuration

defaults
    log     global
    mode    http
    balance roundrobin      # Maybe use leastconn?
    option  httpchk
    option  dontlognull
    option  abortonclose
    option  redispatch
    option  http-keep-alive
    option  http-server-close       # Server-facing connection is closed after the end of the response is received, but the client-facing connection remains open.

    timeout connect 10              # 10ms timeout, applies when a backend is not found
    timeout client  120000          # 120s timeout, applies when the client is expected to ack or send data
    timeout server  75              # 35ms timeout, applies when the server is expected to ack or send data
    timeout queue 30		    # 10ms timeout, applies when a request waits for a connection slot to be free
    timeout http-request 120000     # 2mn timeout, applies when waiting for a complete HTTP request
    timeout http-keep-alive 300000  # 5mn timeout, applies when waiting for a new HTTP request to appear
    retries 3                       # Number of times a connection attempt should be retried on a server when a connection is refused or times out

#    errorfile 400 /etc/haproxy/errors/204.http
#    errorfile 403 /etc/haproxy/errors/204.http    
#    errorfile 408 /etc/haproxy/errors/204.http
#    errorfile 500 /etc/haproxy/errors/204.http
#    errorfile 502 /etc/haproxy/errors/204.http
#    errorfile 503 /etc/haproxy/errors/204.http
#    errorfile 504 /etc/haproxy/errors/204.http


## Frontend Configuration

# Frontends handle incoming HTTP connections

#frontend bidder-frontend-http
#    bind *:80                                   # Tells HAProxy that this frontend will handle incoming network traffic on this IP and port 80
#    default_backend bidder-backend-204          # Specifies on which backend to forward the incoming traffic

frontend bidder-frontend-openx
    bind *:8002
#    maxconn 3000                   # Max number of connections the server will accept to serv (excess connections will be queued by the system in the listen queue and will be served once a connection closes
#    default_backend bidder-backend
    default_backend bidder-backend-204

frontend bidder-healthcheck
    bind *:10000
    default_backend bidder-backend-200


## Backend Configuration

backend bidder-backend-200
    errorfile 503 /etc/haproxy/errors/200.http

backend bidder-backend-204
    errorfile 503 /etc/haproxy/errors/204.http

backend bidder-backend
    timeout http-keep-alive 600000  # 10mn timeout, applies when waiting for a new HTTP request to appear
    errorfile 500 /etc/haproxy/errors/204.http
    errorfile 502 /etc/haproxy/errors/204.http
    errorfile 503 /etc/haproxy/errors/204.http
    errorfile 504 /etc/haproxy/errors/204.http

    # Check option makes the load balancer periodically perform health check on this server
    # server biddertest2 192.168.24.104:11000 maxconn 1 check inter 2000
    # server v4-test 192.168.20.253:9990 #check inter 2000 weight 10
    # server v4-test-mlabour 192.168.27.51:9990 check inter 2000 maxconn 6 weight 10
    # server v4-test-mbleher 192.168.25.165:11000 check inter 2000 maxconn 6
    server biddertest1 192.168.31.242:11000 check


## Stats Configuration

listen stats1
    bind-process 1
    bind            *:5000
    timeout client  5000
    timeout server  5000
    timeout connect 5000
    timeout http-request 5000
    mode    http
    stats   enable
    stats   hide-version
    stats   uri /
    stats   realm HAProxy\ Statistics
    stats   auth admin:admin

listen stats2
    bind-process 2
    bind            *:5001
    timeout client  5000
    timeout server  5000
    timeout connect 5000
    timeout http-request 5000
    mode    http
    stats   enable
    stats   hide-version
    stats   uri /
    stats   realm HAProxy\ Statistics
    stats   auth admin:admin

listen stats3
    bind-process 3
    bind            *:5002
    timeout client  5000
    timeout server  5000
    timeout connect 5000
    timeout http-request 5000
    mode    http
    stats   enable
    stats   hide-version
    stats   uri /
    stats   realm HAProxy\ Statistics
    stats   auth admin:admin


#   200  access to stats page, and when replying to monitoring requests
#   400  for an invalid or too large request
#   401  when an authentication is required to perform the action (when
#        accessing the stats page)
#   403  when a request is forbidden by a "block" ACL or "reqdeny" filter
#   408  when the request timeout strikes before the request is complete
#   500  when haproxy encounters an unrecoverable internal error, such as a
#        memory allocation failure, which should never happen
#   502  when the server returns an empty, invalid or incomplete response, or
#        when an "rspdeny" filter blocks the response.
#   503  when no server was available to handle the request, or in response to
#        monitoring requests which match the "monitor fail" condition
#   504  when the response timeout strikes before the server responds
